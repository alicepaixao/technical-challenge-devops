name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Build with Gradle
        run: ./gradlew build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Run tests with Gradle
        run: ./gradlew test

      - name: Archive test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: build/test-results/test/

  sonarqube:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=your_project_key
            -Dsonar.organization=your_organization
            -Dsonar.host.url=https://sonarcloud.io

  sast:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run SAST
        run: |
          # Supondo o uso de um scanner SAST como o OWASP Dependency-Check
          ./dependency-check/bin/dependency-check.sh --project "MyApp" --scan ./src --out reports/dependency-check-report.html
      - name: Upload SAST report
        uses: actions/upload-artifact@v2
        with:
          name: sast-report
          path: reports/dependency-check-report.html

  dast:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run DAST
        run: |
          # Supondo o uso de um scanner DAST como o OWASP ZAP
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://your-application-url.com -g gen.conf -r testreport.html
      - name: Upload DAST report
        uses: actions/upload-artifact@v2
        with:
          name: dast-report
          path: testreport.html

  deploy:
    runs-on: ubuntu-latest
    needs: [test, sonarqube, sast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.19.0'

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig
          kubectl --kubeconfig=kubeconfig apply -f k8s/deployment.yaml
          kubectl --kubeconfig=kubeconfig apply -f k8s/service.yaml
